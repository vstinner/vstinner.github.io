+++++++++++++++++++++++++++++++++++++++++++++++
Status of the Python Limited C API (March 2024)
+++++++++++++++++++++++++++++++++++++++++++++++

:date: 2024-03-20 17:00
:tags: c-api, cpython
:category: cpython
:slug: status-limited-c-api-march-2024
:authors: Victor Stinner

In Python 3.13, I made many multiple enhancements to make the limited C API
more usable:

* Argument Clinic can now generates code using the limited C API;
* It's now possible to easily format a type name using the limited C
  API;
* 16 stdlib extensions are now built with the limited C API.

Stable ABI in Python 3.2
========================

In 2009, Martin von LÃ¶wis wrote `PEP 384 <https://peps.python.org/pep-0384/>`_
"Defining a Stable ABI" and implemented in Python 3.2. It is made in two parts:

* A **limited** C API: subset of the regular C API.
* The **stable** ABI: binary interface guaranteed to be supported by future
  Python versions.

The pitch is to build a C extension once, distribute this binary on PyPI,
and then forget since it will work on Python 3.2 and newer versions.

.. image:: {static}/images/ghibli-spyrited-away.jpg
   :alt: Ghibli - Spirited Away
   :target: https://danielazconegui.com/en/prints/ghibli-spyrited-away.html

*Drawing: Ghibli - Spirited Away by Daniel Azconegui.*


Test Limited C API in Python 3.10
=================================

`PEP 652 <https://peps.python.org/pep-0652/>`_ "Maintaining the Stable ABI"
by Petr Viktorin in Python 3.10.

Add:

* ``Misc/stable_abi.toml``: declaration of the stable ABI.
* ``test_stable_abi_ctypes`` test.
* ``make check-limited-abi`` test.

Limited C API Enhancements in Python 3.12
=========================================

`PEP 697 <https://peps.python.org/pep-0697/>`_ "Limited C API for Extending
Opaque Types" by Petr Viktorin in Python 3.12. It adds functions such as
`PyObject_GetTypeData <https://docs.python.org/3.12/c-api/object.html#c.PyObject_GetTypeData>`_
and
`PyObject_GetItemData <https://docs.python.org/3.12/c-api/object.html#c.PyObject_GetItemData>`_.


Argument Clinic
===============

I modified Argument Clinic (AC) to generate C code compatible with the limited
C API.

The first part was to move private functions to the internal C API to generate
``#include`` to get these functions. Then I modified Argument Clinic to not
generate these ``#include`` when private functions were not used.

Example
-------

Example from the ``grp`` extension::

    /*[clinic input]
    grp.getgrgid

        id: object

    Return the group database entry for the given numeric group ID.

Python 3.12 uses the private ``_PyArg_UnpackKeywords()`` functions::

    args = _PyArg_UnpackKeywords(args, nargs, NULL, kwnames, &_parser, 1, 1, 0, argsbuf);
    if (!args) {
        goto exit;
    }
    id = args[0];
    return_value = grp_getgrgid_impl(module, id);

Python 3.13 uses the public ``PyArg_ParseTupleAndKeywords()`` function of the
limited C API::

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:getgrgid", _keywords,
        &id))
        goto exit;
    return_value = grp_getgrgid_impl(module, id);


PEP 737: Format Type Name
=========================

I wrote `PEP 737 <https://peps.python.org/pep-0737/>`_ "C API to format a type
fully qualified name" which was accepted in Python 3.13. Changes:

* Add ``PyType_GetFullyQualifiedName()`` function.
* Add ``PyType_GetModuleName()`` function.
* Add ``%T``, ``%#T``, ``%N`` and ``%#N`` formats to
  ``PyUnicode_FromFormat()``.

Example
-------

Example of the ``pwd`` extension with the code generating an error message.

Python 3.12 uses the private ``_PyArg_BadArgument()`` private::

    _PyArg_BadArgument("getpwnam", "argument", "str", arg);

Python 3.13 uses the new ``%T`` format of the limited C API::

    PyErr_Format(PyExc_TypeError,
                 "getpwnam() argument must be str, not %T",
                 arg);

But ``_PyArg_BadArgument()`` is not part of the limited C API.


Convert stdlib extensions to the limited C API
==============================================

At August 2023, I proposed to:
`Use the limited C API for some of our stdlib C extensions
<https://discuss.python.org/t/use-the-limited-c-api-for-some-of-our-stdlib-c-extensions/32465>`_.

There are now **16** C extensions built with the limited C API:

* ``_ctypes_test``
* ``_multiprocessing.posixshmem``
* ``_scproxy``
* ``_stat``
* ``_statistics``
* ``_testimportmultiple``
* ``_testlimitedcapi``
* ``_uuid``
* ``errno``
* ``fcntl``
* ``grp``
* ``md5``
* ``pwd``
* ``resource``
* ``termios``
* ``winsound``

Moreover, C API tests are now split in 3 extensions:

* ``_testlimitedcapi``: limited C API (``Py_LIMITED_API``)
* ``_testcapi``: public C API
* ``_testinternalcapi``: internal C API (``Py_BUILD_CORE``)

Since August 2023, Argument Clinic (AC) was enhanced to generate more efficient
code for the limited C API. Code generated by AC for the `_statistics`
extension is now as efficient or even a little bit more efficient since code is
even inlined! The METH_FASTCALL calling convention is now used by the limited C
API as well.

Other C extensions use the internal C API for various reasons or are using
functions which are lacking in the limited C API. Remaining issues should be
analyzed on a case by case basis.

This work shows that non-trivial C extensions can be written using only the
limited C API version 3.13.
